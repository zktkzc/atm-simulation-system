<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>